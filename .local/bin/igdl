#!/bin/env ruby
require "nokogiri"
require "open-uri"
require "json"
require "cli/ui"

def parseArgs()
  if ARGV.empty?
    puts "No URLs specified you schmuck."
    exit
  end

  parsed = Array.new
  ARGV.each do |url|
    hash = Hash.new
    original = url

    url = url.strip
    url = url[/www\.instagram\.com\/p\/[\w\d\-_]+/]

    if url.nil?
      puts "Skipping \"#{original}\", unexpected format."
    else
      hash[:post] = URI("https://#{url}")
      hash[:meta] = URI("https://#{url}?__a=1")
      parsed << hash
    end
  end

  parsed
end

def fetchMetadata(post)
  metadata = JSON.parse(Nokogiri::HTML(post[:meta].open)).dig("graphql", "shortcode_media")

  time = Time.at(metadata["taken_at_timestamp"])
  post[:time] = time.strftime("%Y-%m-%d_%H-%M")
  post[:caption] = metadata.dig("edge_media_to_caption", "edges", 0, "node", "text")&.gsub("\n", "")
  post[:caption] = "No caption" if post[:caption].nil? or post[:caption].empty?
  post[:isVideo] = metadata["is_video"]

  username = metadata.dig("owner", "username")
  username.nil? ? post[:username] = "unknown" : post[:username] = username


  if time.year.odd?
    post[:path] = "#{username}/#{time.year} - #{time.year + 1}"
  else
    post[:path] = "#{username}/#{time.year - 1} - #{time.year}"
  end

  if metadata["is_video"]
    post[:download] = metadata["video_url"]
    post[:path] = "#{post[:path]}/video"
  else
    post[:download] = metadata["display_url"]
  end

  ext = post[:download][/\.\w+\?/][/\w+/]
  post[:filename] = "#{post[:time]}.#{ext}"

  post
end

def update_spinner(spinner, status)
  spinner.update_title "{{@widget/status:#{status[:finished]}:#{status[:error]}:#{status[:downloading]}:#{status[:metadata]}}}"
end

def run
  CLI::UI::StdoutRouter.enable

  CLI::UI::Spinner.spin("Initializing...") do |spinner|
    # Setup
    threads = Array.new
    posts = parseArgs
    status = {
      :metadata => posts.count,
      :downloading => 0,
      :error => 0,
      :finished => 0
    }
    update_spinner spinner, status

    # Create threads
    posts.each do |post|
      threads << Thread.new(post, spinner, status) do
        # Fetch metadata
        fetchMetadata post
        status[:metadata] -= 1
        status[:downloading] += 1
        update_spinner spinner, status

        # Download content
        post[:file] = URI.open post[:download]

        # Save file to disk
        FileUtils.mkpath(post[:path]) unless Dir.exists?(post[:path])
        File.open("./#{post[:path]}/#{post[:filename]}", "wb") do |file|
          file.write(post[:file].read)
        end

        # Update status to say that we're finished
        status[:downloading] -= 1
        status[:finished] += 1
        update_spinner spinner, status
      end # thread end
    end # posts.each_with_index end

    threads.each {|t| t.join}
  end # spinner end
end

run
