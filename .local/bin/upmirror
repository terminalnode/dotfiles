#!/bin/sh
# A simple script for downloading a new mirror list for Archlinux and rank them by speed.
# Option 'url': Just print the URL and exit.

# Defaults
COUNTRIES="SE NO DK FI DE NL"
[ "$(id -u)" -eq 0 ] &&
    LOCATION="/etc/pacman.d" ||
    LOCATION="$HOME"

# Bold typeface and stuff
[ -x "$(command -v tput)" ] && BOLD=$(tput bold) && NORMAL=$(tput sgr0)

# Most of the script logic resides in the following functions.
help() {
    cat << EOF
${BOLD}upmirror${NORMAL}
A tool for fetching the latest and fastest mirrors for Archlinux.

-h, --help               Show this help text, then exit.
-u, --url                Print the URL from which mirrors will be fetched, then exit.
-c, --countries [CODES]  Countries from which mirrors will be picked.
-p, --path [PATH]        The path to which the new mirrors will be saved.

Default countries:
    ${BOLD}${COUNTRIES}${NORMAL}

Default path:
    ${BOLD}/etc/pacman.d/${NORMAL} when running as root.
    ${BOLD}~/${NORMAL} when running as any other user.

    (If PATH/mirrorlist already exists a backup will be created)
EOF
    exit 0
}

check_deps() {
    # Checks if dependencies are installed and executable.
    unset DEPS
    [ -z "$(command -v curl)" ] &&
        DEPS="${DEPS} curl"
    [ -z "$(command -v rankmirrors)" ] &&
        DEPS="${DEPS} pacman-contrib"
    [ -z "$(command -v getopt)" ] &&
        DEPS="${DEPS} util-linux"
}

install_deps() {
    # See what dependencies need installing, return if none.
    check_deps
    [ -z "$DEPS" ] &&
        return

    # Install dependencies
    [ "$(id -u)" -eq "0" ] && pacman -S ${DEPS}
    [ "$(id -u)" -ne "0" ] && sudo pacman -S ${DEPS}

    # Check that dependencies were indeed installed.
    check_deps
    [ -n "$DEPS" ] &&
        echo "Dependencies were either not installed or are still not executable." &&
        exit 1
}

make_url() {
    [ -z "$COUNTRIES" ] &&
        echo "${BOLD}ERROR!${NORMAL} The list of country codes is empty. Exiting." &&
        exit 1
    URL="https://www.archlinux.org/mirrorlist/?protocol=https&use_mirror_status=on" 
    for COUNTRY in ${COUNTRIES}
        do URL="$URL&country=$COUNTRY"
    done

    # If --url is set, display URL and exit.
    [ -n "$URL_ONLY" ] &&
        echo "${BOLD}This is the URL I would be using to download the mirrors:${NORMAL}" &&
        echo "$URL" &&
        exit 0
}

get_mirrors() {
    make_url
    MIRRORS=$(
        curl -s "$URL" |
        sed -e 's/^#Server/Server/' -e '/^#/d' |
        rankmirrors -n 30 -
    )

    [ -z "$MIRRORS" ] &&
        echo "${BOLD}ERROR!${NORMAL} New mirror file was empty." &&
        echo "This may happen if the URL supplied was bad." &&
        echo "Check that the country codes you supplied were correct." &&
        exit 1
}

write_file() {
    # If there is a trailing slash on the save location, remove it.
    LOCATION="$(echo "$LOCATION" | sed 's/\/$//g')"

    # Replace ~ with $HOME
    echo "$HOME" | grep -q ':' &&
        echo "${BOLD}ERROR!${NORMAL} Your home path can't have \":\" in it. What's wrong with you?" &&
        exit 1
    LOCATION=$(echo "$LOCATION" | sed "s:~:${HOME}:")

    # Check that save location exists and is a directory.
    [ ! -d "$LOCATION" ] &&
        echo "${BOLD}ERROR!${NORMAL} ${LOCATION} either does not exist or isn't a directory. Aborting." &&
        exit 1

    # Check that the save location exists and is writeable.
    [ ! -w "$LOCATION" ] &&
        echo "${BOLD}ERROR!${NORMAL} ${LOCATION}/ is not writeable. Aborting." &&
        exit 1
    
    # Check if a mirrorlist already exists in $LOCATION, if it does create a backup
    [ -r "${LOCATION}/mirrorlist" ] &&
        cp "${LOCATION}/mirrorlist" "${LOCATION}/mirrorlist_backup"

    # Write new mirrorlist
    echo "$MIRRORS" > "${LOCATION}/mirrorlist"
}

# Parse options
options=$(getopt -l "help,url,path:,countries:" -o "hup:c:" -- "$@")
eval set -- "$options"

while true
do
    case $1 in
        -h|--help)
            help
            exit 0
            ;;
        -u|--url)
            URL_ONLY=true
            ;;
        -c|--countries)
            COUNTRIES="$2"
            shift
            ;;
        -p|--path)
            LOCATION="$2"
            shift
            ;;
        --)
            shift
            break
            ;;
    esac
    shift
done

# Run program
install_deps
get_mirrors
write_file
